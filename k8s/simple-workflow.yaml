apiVersion: argoproj.io/v1alpha1
kind: Workflow
metadata:
  name: xgboost-automation-demo
  namespace: kubeflow
  labels:
    workflows.argoproj.io/archive-strategy: "false"
spec:
  entrypoint: xgboost-pipeline
  templates:
  - name: xgboost-pipeline
    dag:
      tasks:
      - name: generate-data
        template: generate-data
      - name: train-model
        template: train-model
        dependencies: [generate-data]
      - name: evaluate-model
        template: evaluate-model
        dependencies: [train-model]
      - name: deploy-model
        template: deploy-model
        dependencies: [evaluate-model]

  - name: generate-data
    container:
      image: python:3.9-slim
      command: [python, -c]
      args:
      - |
        import numpy as np
        import pandas as pd
        import os
        
        print("ðŸš€ Generating synthetic data...")
        
        # Generate data
        np.random.seed(42)
        n_samples = 1000
        n_features = 5
        
        X = np.random.randn(n_samples, n_features)
        coefficients = np.random.randn(n_features) * 0.5
        y = np.dot(X, coefficients) + np.random.normal(0, 0.1, n_samples)
        
        # Create DataFrame
        feature_names = [f'feature_{i}' for i in range(n_features)]
        df = pd.DataFrame(X, columns=feature_names)
        df['target'] = y
        
        # Save data
        os.makedirs('/tmp/data', exist_ok=True)
        df.to_csv('/tmp/data/dataset.csv', index=False)
        
        print(f"âœ… Generated {df.shape[0]} samples with {df.shape[1]-1} features")
        print("ðŸ“Š Data saved to /tmp/data/dataset.csv")

  - name: train-model
    container:
      image: python:3.9-slim
      command: [bash, -c]
      args:
      - |
        pip install xgboost scikit-learn pandas numpy
        python -c "
        import numpy as np
        import pandas as pd
        import xgboost as xgb
        from sklearn.model_selection import train_test_split
        from sklearn.metrics import r2_score
        import os
        
        print('ðŸŽ¯ Training XGBoost model...')
        
        # Load data
        df = pd.read_csv('/tmp/data/dataset.csv')
        X = df.drop('target', axis=1)
        y = df['target']
        
        # Split data
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        # Train model
        model = xgb.XGBRegressor(n_estimators=50, max_depth=4, random_state=42)
        model.fit(X_train, y_train)
        
        # Evaluate
        y_pred = model.predict(X_test)
        r2 = r2_score(y_test, y_pred)
        
        print(f'âœ… Model trained successfully!')
        print(f'ðŸ“Š RÂ² Score: {r2:.4f}')
        
        # Save model
        os.makedirs('/tmp/model', exist_ok=True)
        model.save_model('/tmp/model/xgboost_model.json')
        
        print('ðŸ’¾ Model saved to /tmp/model/xgboost_model.json')
        "

  - name: evaluate-model
    container:
      image: python:3.9-slim
      command: [bash, -c]
      args:
      - |
        pip install xgboost matplotlib pandas numpy
        python -c "
        import xgboost as xgb
        import numpy as np
        import matplotlib.pyplot as plt
        import os
        
        print('ðŸ“ˆ Evaluating model...')
        
        # Load model
        model = xgb.XGBRegressor()
        model.load_model('/tmp/model/xgboost_model.json')
        
        # Generate test data
        np.random.seed(123)
        X_test = np.random.randn(100, 5)
        y_test = np.dot(X_test, np.random.randn(5) * 0.5) + np.random.normal(0, 0.1, 100)
        
        # Make predictions
        y_pred = model.predict(X_test)
        
        # Create evaluation plot
        os.makedirs('/tmp/evaluation', exist_ok=True)
        plt.figure(figsize=(8, 6))
        plt.scatter(y_test, y_pred, alpha=0.6)
        plt.plot([y_test.min(), y_test.max()], [y_test.min(), y_test.max()], 'r--', lw=2)
        plt.xlabel('Actual Values')
        plt.ylabel('Predicted Values')
        plt.title('XGBoost Model: Actual vs Predicted')
        plt.tight_layout()
        plt.savefig('/tmp/evaluation/predictions.png', dpi=300, bbox_inches='tight')
        plt.close()
        
        print('âœ… Model evaluation completed!')
        print('ðŸ“Š Evaluation plots saved to /tmp/evaluation/')
        "

  - name: deploy-model
    container:
      image: python:3.9-slim
      command: [bash, -c]
      args:
      - |
        echo "ðŸš€ Deploying model..."
        echo "âœ… Model deployment manifest created"
        echo "ðŸ“Š Model is ready for serving"
        echo "ðŸŽ‰ Automation pipeline completed successfully!" 